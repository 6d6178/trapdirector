<?php
use Icinga\Web\Url;
?>
<div class="controls">
  <?= /** @var \Icinga\Module\Trapdirector\Controllers\HandlerController $this */ $this->tabs ?>
  <h1>Add trap handler</h1>
  <div class='action-bar'>
  </div>

</div>


<div class="content">

<form id="mainForm" name="mainForm" enctype="application/x-www-form-urlencoded" action="<?= Url::fromPath("trapdirector/") ?>handler/add_form" method="post">
	
	<input type="hidden" name="db_rule" id="id_Hidden_db_rule"
		value="<?= $this->ruleid ?>" >
	<input type="hidden" name="hostid" id="id_Hidden_hostid"
		value="<?= $this->hostid ?>">
	<?php 
	   if ($this->modifier != null)
	   {
	       echo '<span>Last modified by ' . $this->modifier. ' at ' . $this->modified .'</span>';
	   }
	?>
	<input type="hidden" name="hostid" id="id_Hidden_hostgroup"
		value="<?= $this->hostgroupid ?>">	
	<fieldset id="fieldset-source_definition" class=""><legend>Trap source and handler information</legend>
	  <table> <tr> 
	  <td>
		<input type="checkbox" id="id_host_or_hostgroup"
			onChange="toggle_host_hostgroup()"
			<?php if ($this->selectGroup) { echo 'checked'; } ?>> 
		<label for="id_host_or_hostgroup" > Select by hostgroup</label>
		<div id="source_by_hostgroup" style="display:none">
			<!-- Host group selection -->
			<!-- to get : id_hostgroupfilter / id_service_hostgroup -->
			<!-- $this->hostgroupname / hostGroupFilterGet()->hostgroups_list / -->
			<div class="control-group">
				<div class="control-label-group">
					<span>
						<label for="id_hostgroupfilter" class="control-label optional">Host group</label>
					</span>
				</div>
				<input type="text" name="hostgroup" id="id_hostgroupfilter" placeholder="Enter partial name" list="hostgroups_list" size=30
					oninput="hostGroupFilterGet('#id_hostgroupfilter','#hostgroups_list')"
					value="<?= $this->hostgroupname ?>" >
				<datalist id="hostgroups_list">
				</datalist>
			</div>
			
			<!-- Service name selection -->
			<div class="control-group">
				<div class="control-label-group">
					<span>
						<label for="id_service_hostgroup" class="control-label optional">Service</label>
					</span>
				</div>
				<select name="service_hostgroup" id="id_service_hostgroup" 
				 onfocus="hostGroupServiceGet(null,null,null,1)">
					<option value="-1" selected>Enter host group first</option>
				</select>		
			</div>
		</div>
		
		<div id="source_by_hostname">
			<!-- Host name selection -->
			<div class="control-group">
				<div class="control-label-group">
					<span id="id_hostfilter_span_label">
						<label for="id_hostfilter" class="control-label optional">Host name</label>
					</span>
				</div>
				<input type="text" name="hostfilter" id="id_hostfilter" placeholder="Enter partial name" list="hosts_list" size=30
					oninput="hostFilterGet('#id_hostfilter','#hosts_list')"
					value="<?= $this->hostname ?>" >
				<datalist id="hosts_list">
					<!-- <optgroup label=""> -->
		<?php
			foreach($this->hostlist as $hostopt)
			{  // TODO : check why it doesn't end with '/option'
				echo '<option>' . $hostopt . '<option>';
			}
		?>
				</datalist>
			</div>
			
			<!-- Service name selection -->
			<div class="control-group">
				<div class="control-label-group">
					<span>
						<label for="id_service" class="control-label optional">Service</label>
					</span>
				</div>
				<select name="service" id="id_service" onfocus="serviceGet(null,'#id_hostfilter','#id_service',1)">
					<option value="-1" selected>Enter host first</option>
				</select>		
			</div>
		</div>
		</td>
		<td style="padding-left: 150px;">
			<div class="control-group">
				<div class="control-label-group">
					<span id="id_comment_span_label">
						<label for="id_comment" class="control-label optional">Handler comment</label>
					</span>
				</div>
				<input type="text" name="coment" id="id_comment" placeholder="Enter trap handler comment here" list="hosts_list" size=60
					value="<?= $this->comment ?>" > 
			</div>		
			<div class="control-group">
				<div class="control-label-group" data-base-target="_next">
					<span>
						<label for="id_handler_category" class="control-label optional">
							Handler category (<a href="<?= Url::fromPath('trapdirector/') ?>status/uimgt" > manage </a>)</label>
					</span>
				</div>
				<select name="service" id="id_handler_category"  >
		<?php
		foreach($this->categoryList as $index => $catName)
			{ 
			    $selected = ($index == $this->category)? 'selected' : '';
			    echo '<option value="'. $index .'" '.$selected.'>' . $catName . '</option>';
			}
		?>					
				</select>		
			</div>			
		</td>
	</tr>
	</table>
	</fieldset>
	
	<fieldset id="fieldset-objects_definition" class=""><legend>Trap definition</legend>		
		<!-- trap OID selection -->
		<div class="control-group">
			<select name="mibs" id="id_mainMibs"
				onChange="TrapNameGet('id_mainMibs','id_mainMibs_Trap')">
				<option value='-1'>...</option>
<?php  // Set mib list
	foreach ($this->mibList AS $MIB) 
	{
		echo '<option value=' . $MIB;
		if ($MIB==$this->mib)  // select option if current MIB
		{
			echo ' selected ';
		}
		echo '>'.$MIB.'</option>'."\n";
	}
?>			
			</select>
			<select name="mibs_trap" id="id_mainMibs_Trap"
				onChange="selectTrapName()">
<?php
		if (count($this->trapListForMIB)==0)
		{
			echo "<option value='-1'>&lt;-- Select MIB First</option>\n";
			$this->execute_trap_select=false;
		}
		else
		{
			$this->execute_trap_select=true; // do actions like if user selected this but with no update
			foreach ($this->trapListForMIB as $key => $val)
			{
				echo '<option value=' . $key;
				if ($val == $this->name)
				{
					echo ' selected ';
				}
				echo '>'.$val.'</option>'."\n";
			}
		}
?>				
				
			</select>			
		</div>
		<div class="control-group">
			<div class="control-label-group">
				<span id="id_mainoid_span_label">
					<label for="id_mainoid" class="control-label optional">Trap OID</label>
				</span>
			</div>			
			<input type="text" name="mainoid" id="id_mainoid" placeholder="Enter oid" size=40
			value="<?= $this->mainoid ?>" > 
			<span id="id_mainoid_trapname"> MIB::name </span>
			<button type="button" disabled id="id_mainoid_add_objects" onclick="onclickAddObjects()">
				Add objects
			</button>
		</div>
		<div>
		Description : <span id="trap_description"></span>
		</div>
		<!-- Revert OK timeout selection -->
		<div class="control-group">
			<div class="control-label-group">
				<span id="id_revertOK_span_label">
					<label for="id_revertOK" class="control-label optional">Revert OK (s)</label>
				</span>
			</div>
			<input type="text" name="revertOK" id="id_revertOK" placeholder="Revert time"
			 value="<?=  $this->revertOK ?>">
		</div>
		
	</fieldset>
	
	<fieldset id="fieldset-objects_definition" class=""><legend>Trap Objects definition</legend>

		<div class="control-group">
			<div class="control-label-group">
			<span id="id_trapdataElmts_span_1">
					<label for="id_trapdataNewOID" class="control-label optional">Add an OID</label>
				</span>
			</div>
			<input type="text" name="trapdataElmts_1" id="id_trapdataNewOID" value="" placeholder="Enter oid"> 
			<button type="button" id="button_oid_add" onclick="click_button_oid_add()">Add</button>
		</div>
		<table class="simple common-table">
			<thead>
				<tr>
					<th>Shortcut</th><th>OID</th><th>MIB</th><th>Name</th>
					<th>Value</th><th>type</th><th>Delete</th>
				</tr>
			</thead>
			<tbody id="obj_table_body">
				<!--
				<tr id='obj_table_oid_1'>
					<td id='obj_table_oid_1_SC'>$1</td>
					<td>.1.3.6.1.2.1.1.2.5</td><td>IF-MIB</td><td>coldStart</td>
					<td>value</td><td>type</td>
					<td>
						<button type="button" onclick="click_button_table_del(1)">
							Del.
						</button>
					</td>
				</tr>
				-->
			</tbody>
		</table>
	</fieldset>
	
	<fieldset id="fieldset-rules_list" class=""><legend>Multiple rules list</legend>
			<table class="simple common-table"  id="id_rules_table">
			<thead>
				<tr>
					<th>Order</th><th>Rule</th><th>Display</th><th>Perf. Data</th><th>on match</th>
					<th>Host reassign</th><th>Service reassign</th><th>Move</th><th>Edit</th><th>Delete</th>
				</tr>
			</thead>
			<tr style="background-color: yellow;">
				<td>Default</td>
				<td>$1$ = 3</td>
				<td>Result : $1$</td>
				<td>result:$1$</td>
				<td>OK</td>
				<td>No</td>
				<td>No</td>
				<td><button type="button" onclick="ruleListc.setDefaultRule(true)">Up</button> 
					- <button type="button" onclick="ruleListc.setDefaultRule(false)">Down</button></td>
				<td><button type="button" onclick="click_button_rule_del(1)">Edit</button></td>
				<td><button type="button" onclick="click_button_rule_del(1)">Del.</button></td>
			</tr>
			</table>	
	</fieldset>
	<fieldset id="fieldset-objects_definition" class=""><legend>Rule Editor for rule : <b id="id_rule_number">Default</b></legend>
		<div class="control-group" data-base-target="_next">
			<a href="<?= Url::fromPath("trapdirector/") ?>handler/testrule" class="link-button icon-wrench">Open rule tester</a>
			<button type="button" onclick="ruleList.newRule()">New Rule</button>
			<button type="button" onclick="ruleList.saveCurrentRule()">Save Rule</button>
		</div>
		<table><tr>			
    		<td>
        		<div class="control-group" data-base-target="_next">
                	<div class="control-label-group">
                		<span id="id_rules_label">
                			<label for="id_rules" class="control-label optional">Rule (an empty rule will always return true)</label>
                		</span>
                	</div>
                	<input type="text" name="rules" id="id_rules" placeholder="Rule to evaluate"
                	 value="<?= preg_replace('/"/',"&quot;",$this->rule) ?>" 
                	 size=90/>
                	 <button type="button" name="testrule" id="id_test_rule" value="test" >Test rule</button>
                	 <br>
					 <b><span id="testrule_result"></span></b>
            	</div>
            	<!-- Output Display -->
            	<div class="control-group">
            		<div class="control-label-group">
            			<span id="id_display_label">
            				<label for="id_display" class="control-label optional">Display in Icinga</label>
            			</span>
            		</div>
            		<input type="text" name="display" id="id_display" placeholder="Message sent with service status"
            			value="<?= preg_replace('/"/','&quot;',$this->display) ?>"
            			size=90
            			>
            
            	</div>
            	<div class="control-group">
            		<div class="control-label-group">
            			<span id="id_rule_action_label">
            				<label for="id_rule_action_true" class="control-label optional">Action if rule matches</label>
            			</span>
            		</div>
            		<select name="service" id="id_rule_action_true">
            				<option value="-1" selected>Nothing</option>
            				<option value="0" >OK</option>
            				<option value="1" >Warning</option>
            				<option value="2" >Critical</option>
            				<option value="3" >Unknown</option>
            				<option value="-2" >Ignore</option>
            		</select>		
            		<div class="control-label-group trapdir_rule_default_entries">
            			<span id="id_rule_action_false_label">
            				<label for="id_rule_action_false" class="control-label optional">Action if rule does not match</label>
            			</span>
            		</div>
            		<select name="service" id="id_rule_action_false" class="trapdir_rule_default_entries">
            				<option value="-1" selected>Nothing</option>
            				<option value="0" >OK</option>
            				<option value="1" >Warning</option>
            				<option value="2" >Critical</option>
            				<option value="3" >Unknown</option>
            				<option value="-2" >Ignore</option>
            		</select>			
            		<div class="control-label-group trapdir_rule_default_entries">
            			<span id="id_rule_limit_label">
            				<label for="id_rule_limit" class="control-label optional">Limit (s/m/h)</label>
            			</span>
						
            		</div>
					<input type="text" name="limit" id="id_rule_limit" class="trapdir_rule_default_entries" placeholder="Maximum action per seconds(s)/minutes(m)/hour(h)"
							value="" size=30 >	
				</div>
            </td>
            <td valign='top'>
            	<div class="control-group">
            		<div class="control-label-group">
            			<span id="id_perfdata_label">
            				<label for="id_perfdata" class="control-label optional">Performance data</label>
            			</span>
            		</div>
            		<input type="text" name="perfData" id="id_perfdata" placeholder="Performance data to send"
            			value=""
            			size=90>            		
            	</div>
				<input class="trapdir_rule_list_entries" type="checkbox" id="id_rule_host_or_hostgroup" onChange="ruleList.toggle_host_hostgroup()"> 
				<label for="id_host_or_hostgroup" class ="trapdir_rule_list_entries" > Reassign to hostgroup</label>				
            	<div class="control-group trapdir_rule_list_entries">
            		<div class="control-label-group">
            			<span id="id_host_reassign_label">
            				<label for="id_host_reassign" class="control-label optional">Reassign to host/hostgroup</label>
            			</span>
            		</div>
            		<input type="text" name="hostAssign" id="id_host_reassign" placeholder="No reassigment if left empty"
            			value="" size=40 list="id_rule_host_list" oninput="ruleList.hostFilterGet('#id_host_reassign','#id_rule_host_list')">
						<datalist id="id_rule_host_list">
						</datalist>						
            	</div>
				<!-- Service name selection -->
				<div class="control-group trapdir_rule_list_entries">
					<div class="control-label-group">
						<span>
							<label for="id_service_reassign" class="control-label optional">Reassign Service</label>
						</span>
					</div>
					<select name="service" id="id_service_reassign" onfocus="ruleList.ruleServiceGet()">
						<option value="-1" selected>Unchanged</option>
					</select>
				</div>        	          	
            </td>
        </tr></table>	
	</fieldset>
	
	<div class="control-group">
		<div class="control-label-group">
			<span >
				<label id="id_submit_main_label" for="id_submit_main" class="control-label optional">Create Handler</label>
			</span>
		</div>
		<input type="submit" name="submit" id="id_submit_main" value="Create">
		<button type="button" name="delete" id="id_delete_main" value="Delete" disabled>Delete</button>
		<button type="button" name="clone" id="id_clone_main" value="Clone" style="display: none;">Clone</button>
	</div>

	</form>
</div>

<script type='text/javascript'>
webPath='<?= Url::fromPath("trapdirector/") ?>'
hostHelper=webPath + 'helper/gethosts';
hostgroupHelper=webPath + 'helper/gethostgroups';
serviceHelper= webPath + 'helper/getservices';
hostgroupserviceHelper= webPath + 'helper/gethostgroupservices';
trapfrommmibHelper= webPath + 'helper/gettraps';
translateoidHelper= webPath + 'helper/translateoid';
getobjectsHelper= webPath + 'helper/gettrapobjects';
form_submit= webPath + 'handler/handlerform';
testHelper= webPath + 'helper/testrule';

objectsList=[
	//{1:[1,'.1.3.6.1.2.1.1.2.5','IF-MIB','ifindex','1','Integer (1...32222)]}
];
objectsList_id=1;
count_id=1;
trapDir=null;

var actionList= { '-2' : 'Ignore' ,  '-1' : 'Nothing' ,  '0' : 'OK' ,  '1' : 'Warning' ,  '2' : 'Critical' ,  '3' : 'Unknown'  };
var ruleList = new CruleList('<?= preg_replace("/'/","\'",$this->rule) ?>', '', '<?= preg_replace("/'/","\'",$this->display) ?>', <?= $this->setRuleMatch ?>, <?= $this->setRuleNoMatch ?>);
// ************** Rule List ***************

function CRuleElmt(isDefault=false, rule='', perfdata='', display='', actionOK=-1, actionNOK=-1, hostGroup=null,newHost='', newService=-1, newServiceText = '', newlimit = '0')
{
	this.isDefault=isDefault;
	
	if (hostGroup == null) this.hostGroup = $("#id_host_or_hostgroup").is(":checked"); // on new rule setup set host/hostgroup select as main select
	
	this.updateVal = function(rule, perfdata, display, actionOK, actionNOK, hostGroup, newHost, newService,newServiceText, newlimit) {
		this.rule = rule;
		this.perfdata = 	perfdata;
		this.display = 	display;
		this.actionOK = 	actionOK;
		this.actionNOK = 	actionNOK;
		this.newHost = 	newHost;
		this.newService = 	newService;
		this.hostGroup = hostGroup;
		this.newServiceText = newServiceText;
		this.limit = newlimit;
	}
	
	this.updateVal(rule, perfdata, display, actionOK, actionNOK, this.hostGroup, newHost, newService, newServiceText, newlimit);	
	
	this.render = function(index,current,last=false) {
		let htm = "<tr ";
		if ( current == true ) {
			htm += 'style="background-color: yellow;"' 
		}
		else {
			htm += "onclick='ruleList.ruleEdit( " + index + ")'";
		}
		htm += ">";
		htm += '<td>' + (index == 0 ? 'Default' : index ) + '</td>';
		htm += '<td>' + this.rule + '</td>';
		htm += '<td>' + this.display + '</td>';
		htm += '<td>' + this.perfdata + '</td>';
		htm += '<td>' + actionList[this.actionOK] + '</td>';
		htm += '<td>' + (this.newHost == '' ? 'No' : this.newHost  + (this.hostGroup == true ? '(grp)' : '' ) ) + '</td>';
		htm += '<td>' + (this.newService == '-1' ? 'No' : this.newServiceText ) + '</td>';
		if ( index == 0) { 
			htm+='<td>- / -</td>'
		}
		else 
		{
			htm += '<td>' + (index > 1 ? '<button type="button" onclick="ruleList.ruleUp(' + index + ')">Up</button>' : '-');
			htm += ' / ';
			htm += (last == true) ? '-' : '<button type="button" onclick="ruleList.ruleDown(' + index + ')">Down</button>' ;
			htm += '</td>';
		}
		htm += '<td><button type="button" onclick="ruleList.ruleEdit(' + index + ')">Edit</button></td>';
		if ( index == 0) { 
			htm+='<td>- -</td>'
		}
		else 
		{		
			htm += '<td><button type="button" onclick="ruleList.ruleDelete(' + index + ')">Del.</button></td>';
		}
		htm += '</tr>';
		return htm;
	}
	
	this.check_rule = function(translate = false) {
		// Check rule
		newRule = this.rule;
		newDisplay = this.display;
		newPerfdata = this.perfdata;
		for (i=1;i<objectsList_id;i++)
		{
			if (objectsList[i]==null) continue;
			var objRegexp = new RegExp("\\$"+objectsList[i][0]+"\\$","g");
			newRule=newRule.replace(objRegexp,'_OID('+ objectsList[i][1] +')');
			newDisplay=newDisplay.replace(objRegexp,'_OID('+ objectsList[i][1] +')');
			newPerfdata=newPerfdata.replace(objRegexp,'_OID('+ objectsList[i][1] +')');			
		}
		let noOidRegexp = /\$[\d]+\$/;
		if ( noOidRegexp.test(newRule) ) { trapDir.displayWarning("Invalid $N$ in rule"); return false; }
		if ( noOidRegexp.test(newDisplay) ) { trapDir.displayWarning("Invalid $N$ in display"); return false; }
		if ( noOidRegexp.test(newPerfdata) ) { trapDir.displayWarning("Invalid $N$ in perfdata"); return false; }
		if (translate == true) {
			this.rule = newRule;
			this.display = newDisplay ;
			this.perfdata = newPerfdata;			
		}
		let limitRegexp = /^[\d]+[hms]?$/;
		if ( ! limitRegexp.test(this.limit) ) { trapDir.displayWarning("Invalid limit : " + this.limit); return false; }
		
		return true;
	}
	
}

function CruleList(rule='', perfdata='', display='', actionOK=-1, actionNOK=-1,limit=0)
{
	this.ruleListArray=[];
	this.ruleListIndex=0;
	this.curRule=0;
	this.ruleListArray[0] = new CRuleElmt(true,rule,perfdata, display, actionOK, actionNOK);
	this.isDefault=true;
	this.editRulesetup = function(CurRuleElmt,isDefault) {
		$("#id_rules").val(CurRuleElmt.rule);
		$("#id_display").val(CurRuleElmt.display);
		$("#id_rule_action_true").val(CurRuleElmt.actionOK);
		//$("#id_rule_action_false").prop( "disabled", ! isDefault );
		$("#id_rule_action_false").val(CurRuleElmt.actionNOK);
		$("#id_rule_limit").val(CurRuleElmt.limit);
		$("#id_perfdata").val(CurRuleElmt.perfdata);
		$("#id_rule_host_or_hostgroup").prop('checked', CurRuleElmt.hostGroup);
		//$("#id_rule_host_or_hostgroup").prop( "disabled", isDefault );
		$("#id_host_reassign").val(CurRuleElmt.newHost);
		//$("#id_host_reassign").prop( "disabled", isDefault );
		
		$(".trapdir_rule_list_entries").toggle( ! isDefault );
		$(".trapdir_rule_default_entries").toggle( isDefault );
		this.ruleServiceGet(CurRuleElmt.newService);
		//$("#id_service_reassign").prop( "disabled", isDefault );
		this.setRuleDisplay();
	};
	this.setRuleDisplay = function () { $("#id_rule_number").html(this.curRule==0 ? 'Default' : this.curRule); }

	this.render = function() { // render table
		htm = '<thead><tr><th>Order</th><th>Rule</th><th>Display</th><th>Perf. Data</th><th>on match</th>';
		htm += '<th>Host reassign</th><th>Service reassign</th><th>Move</th><th>Edit</th><th>Delete</th></tr></thead>';
		for (i=1;i<=this.ruleListIndex;i++)
		{
			htm += this.ruleListArray[i].render(i,(this.curRule == i ? true : false), (i == this.ruleListIndex ? true : false ));
		}
		htm += this.ruleListArray[0].render(0,(this.curRule == 0 ? true : false));
		$("#id_rules_table").html(htm);
		this.setRuleDisplay();
	};
	this.newRule = function() {  // Save current and add new rule
		if (this.saveCurrentRule() == false) return;
		this.ruleListIndex++;
		this.ruleListArray[this.ruleListIndex] = new CRuleElmt(false);
		this.isDefault=false;
		this.curRule=this.ruleListIndex;
		this.editRulesetup(this.ruleListArray[this.ruleListIndex],false);
		this.render();
	}
	this.saveCurrentRule = function() {
		this.ruleListArray[this.curRule].updateVal(
			$("#id_rules").val(),$("#id_perfdata").val(),
			$("#id_display").val(),$("#id_rule_action_true").val(),
			$("#id_rule_action_false").val(),$("#id_rule_host_or_hostgroup").is(":checked"),
			$("#id_host_reassign").val(),
			$("#id_service_reassign").val(),$("#id_service_reassign option:selected").text(),
			$("#id_rule_limit").val()
		);
		if (this.ruleListArray[this.curRule].check_rule() == false) return false;
		this.render();
		return true;
	}
	this.ruleUp = function(index) {
		if (index == 1) return;
		ruleN=this.ruleListArray[index];
		this.ruleListArray[index]=this.ruleListArray[index-1];
		this.ruleListArray[index-1]=ruleN;
		if (this.curRule == index) this.curRule--;
		else if (this.curRule == index-1 ) this.curRule++;
		this.render();
	}
	this.ruleDown = function(index) {
		if (index == this.ruleListIndex) return;
		ruleN=this.ruleListArray[index];
		this.ruleListArray[index]=this.ruleListArray[index+1];
		this.ruleListArray[index+1]=ruleN;
		if (this.curRule == index) this.curRule++;
		else if (this.curRule == index+1 ) this.curRule--;		
		this.render();
	}	
	this.ruleEdit = function(index) {
		this.saveCurrentRule();
		this.curRule = index;
		this.isDefault= (index==0 ? true : false);
		this.editRulesetup(this.ruleListArray[this.curRule],this.isDefault);
		this.render();
	}
	this.ruleDelete = function(index) {
		this.ruleListArray.splice(index,1);
		this.ruleListIndex--;
		if (this.curRule == index) { 
			this.ruleEdit(0); 
		} else {
			this.render();
		}
	}
	this.toggle_host_hostgroup = function() {
		$("#id_host_reassign").val('');
		this.ruleListArray[this.curRule].hostGroup = $("#id_rule_host_or_hostgroup").is(":checked");
	}
	this.hostFilterGet = function (source,options) {
		if (this.ruleListArray[this.curRule].hostGroup == true) 
		{
			hostGroupFilterGet(source,options);
		}
		else
		{
			hostFilterGet(source,options);
		}
	}
	this.ruleServiceGet = function (serviceIdToSet = null) {
		destination = '#id_service_reassign';
		checkService=true;
		if (this.ruleListArray[this.curRule].hostGroup == true) 
		{
			source = '#id_host_reassign';
			if ($(source).val() == '') {
				if ($("#id_host_or_hostgroup").is(":checked")) { // If host is empty and main destination host is hostgroup
					source = '#id_hostgroupfilter';
				} else {
					$(destination).html('<option value="-1">No host group selected</option>');
					checkService=false;
				}
			}
			hostGroupServiceGet(serviceIdToSet,source,destination,null,-1,'Unchanged');
		}
		else
		{
			source = '#id_host_reassign';
			if ($(source).val() == '') {
				if ( ! $("#id_host_or_hostgroup").is(":checked")) 	{ // If host is empty and main destination host is not host
					source = '#id_hostfilter';
				} else {
					$(destination).html('<option value="-1">No host selected</option>')
					checkService=false;
				}					
			}				
			serviceGet(serviceIdToSet,source,destination,null,-1,'Unchanged');
		}				
	}
}

// ************** END Rule List ***************
function setToUpdate()
{
	$("#id_submit_main").val("Update");
	$("#id_submit_main_label").html("Update Rule");
	$("#id_delete_main").prop( "disabled", false );
	$("#id_clone_main").show();
}

function deleteMain()
{
	if ($("#id_Hidden_db_rule").val() == -1)
	{
		trapDir.displayWarning("No rule to delete");
		return;
	}
	// Do ajax call
	$.ajax({
			url: form_submit,
			async: true,
			dataType: "json",
			type: "POST",
			data: 
			{
				"db_rule"		: 	$("#id_Hidden_db_rule").val(),
				"action_form"	:	'delete'
			},
	        success: function (data) 
			{
				//alert(data.status);
				if (data.status == "OK") 
				{
					trapDir.displayOK("Rule deleted");
					window.location.replace(data.redirect);
				} 
				else 
				{
					trapDir.displayWarning("Error : "+data.status);		
				}
			},
			error: function (data)
			{
				trapDir.displayWarning ("error" + data);
			}
	});	
}

function submitMain(clone)
{

	// Check everything
	// Hostname/hostgroup
	hostgroupSel=$("#id_host_or_hostgroup").is(":checked");
	if ( hostgroupSel == true )
	{ // hostgroup selection
		if ($("#id_Hidden_hostgroup").val() == -1 ) { trapDir.displayWarning("Invalid hosgroup (hostid)");return; }
		hostid=$("#id_Hidden_hostgroup").val();
		hostname=$("#id_hostgroupfilter").val();
		if ($("#id_service_hostgroup").val() == -1 ) { trapDir.displayWarning("Invalid service");return; }
		servicename=$("#id_service_hostgroup").val();
		serviceid=0;
	}
	else
	{ // Hostname
		if ($("#id_Hidden_hostid").val() == -1 ) { trapDir.displayWarning("Invalid hostname (hostid)");return; }
		hostid=$("#id_Hidden_hostid").val();
		hostname=$("#id_hostfilter").val();
		if ($("#id_service").val() == -1 ) { trapDir.displayWarning("Invalid service");return; }
		servicename=$("#id_service  option:selected").text();
		serviceid=$("#id_service").val();
	}
	// Get OID
	var oidRegexp = /^[\.\d]+$/;
	var getOID=$("#id_mainoid").val();
	if ( ! oidRegexp.test(getOID)  ) { trapDir.displayWarning("Invalid oid");return; }
	// Check if first car is a '.' 
	if (getOID.charAt(0) != '.')
	{
		getOID = '.'+getOID;
	}

	// Get revert time
	var timeRegexp = /^[\d]*$/;
	var revertOK=$("#id_revertOK").val()
	if (revertOK=='') revertOK=0;
	if ( ! timeRegexp.test(revertOK)  ) { trapDir.displayWarning("Invalid Revert OK value");return; }

	newRule=$("#id_rules").val();
	newDisplay=$("#id_display").val();
	for (i=1;i<objectsList_id;i++)
	{
		if (objectsList[i]==null) continue;
		var objRegexp = new RegExp("\\$"+objectsList[i][0]+"\\$","g");
		newRule=newRule.replace(objRegexp,'_OID('+ objectsList[i][1] +')');
		newDisplay=newDisplay.replace(objRegexp,'_OID('+ objectsList[i][1] +')');	
		
	}

	// Get comment and category
	comment = $("#id_comment").val();
	category = $("#id_handler_category").val();
	
	if (clone == 1)
	{
	  actionFormVal='clone';
	}
	else
	{
	  actionFormVal='save';
	}
	
	// Do ajax call
	$.ajax({
			url: form_submit,
			async: true,
			dataType: "json",
			type: "POST",
			data: 
			{
				"hostgroup"		:	(hostgroupSel)?1:0,
				"db_rule"		: 	$("#id_Hidden_db_rule").val(),
				"hostid"		:	hostid,
				"hostname"		:	hostname,
				"serviceid"		:	serviceid,
				"serviceName"	:	servicename,
				"comment"		:	comment,
				"category"		:	category,
				"oid"			:	getOID,
				"revertOK"		:	revertOK,
				"display"		:	newDisplay,
				"rule"			:	newRule,
				"ruleMatch"		:	$("#id_rule_action_true").val(),
				"ruleNoMatch"	:	$("#id_rule_action_false").val(),
				"action_form"	:	actionFormVal
			},
	        success: function (data) 
			{
				//alert(data.status);
				if (data.status == "OK") 
				{
					$("#id_Hidden_db_rule").val(data.id);
					setToUpdate();
					trapDir.displayOK("Saved");
					
				} 
				else 
				{
					trapDir.displayWarning("Error : "+data.status);		
				}
			},
			error: function (data)
			{
				trapDir.displayWarning ("Error" + data);
			}
	});	
		
}

function toggle_host_hostgroup()
{
	state=$("#id_host_or_hostgroup").is(":checked");
	if (state)
	{
		$("#source_by_hostgroup").show();
		$("#source_by_hostname").hide();
	}
	else
	{
		$("#source_by_hostgroup").hide();
		$("#source_by_hostname").show();		
	}	
	//.hide()
}

function onclickAddObjects()
{
	// Get mib
	trap=$("#id_mainoid").val();
	//alert(hostInput);
	$.ajax({
			url: getobjectsHelper,
			async: true,
			dataType: "json",
			type: "POST",
			data: 
			{
				"trap": trap,
			},
	        success: function (data) 
			{
				//alert(data.status);
				if (data.status == "OK") 
				{
					trapObjectsList=data.objects;
					// Put host list in <option> for user to choose.
					for(var key in trapObjectsList)
					{
						//alert(trapObjectsList[key]['type_enum']);
						click_button_oid_add_cb(
							count_id,
							key,
							trapObjectsList[key]['mib'],
							trapObjectsList[key]['name'],
							'',  // Value
							trapObjectsList[key]['type'],
							trapObjectsList[key]['type_enum'],
							trapObjectsList[key]['description']
						);
						count_id++;
						  
					}				
				} 
				else 
				{
						//alert ("Error");
						trapDir.displayWarning(data.status);		
				}
			}
	});	
}

function click_button_oid_add()
{// first resolve oid if possible then continue in click_button_oid_add_cb
	//alert('add 1');
	add_oid=$("#id_trapdataNewOID").val();
	//test_oid= new RegExp(".1[0-9\.]+");
	if (add_oid[0] != '.') add_oid='.'+add_oid; // add starting "."
	if ( add_oid.match(/^[0-9\.\*]+$/) == null) {
		trapDir.displayWarning("Not a valid oid");
		return;
	}
	// If not a regexp, try to translate
	if ( add_oid.match(/\*/) == null) {
		translateOID(add_oid,click_button_oid_add_cb);
		return;
	}		

	click_button_oid_add_cb(count_id,add_oid,'[REGEXP]','[REGEXP]','','Unknown','This is a regexp OID');
	count_id++;
}

function click_button_oid_add_cb(index_oid,oid,mib,name,value,type,type_enum,description=null)
{
	ido=objectsList_id;
	addarray=[count_id,oid,mib,name,''];
	objectsList[objectsList_id]=addarray;
	objectsList_id++;
	if (value.match(/^".*"$/)) value=value.substr(1,value.length-2); // Get rid of surrounding "" done by PDS::quote
	//if (count_id <= index_oid) count_id=index_oid+1;
	//alert(count_id);
	
	htm=	"<tr id='obj_table_oid_"+ido+"'>\n";
	htm += 	"	<td id='obj_table_oid_"+ido+"_SC'>$"+(index_oid)+"$</td>\n";
	htm +=	"	<td>"+oid+"</td>\n";
	htm +=	"	<td>"+mib+"</td>\n";
	htm +=	"	<td>"+name+"</td>\n";
	htm +=	"	<td>\n";
	htm +=	"		<input type='text' id='obj_table_oid_"+ido+"_value' placeholder='No value' size=20 value='"+value+"'/></td>\n";	
	htm +=	"	<td class='traphover'>"+type+" <span class='tohover'>"
	if (type_enum != 'null') { htm += 'Values : ' + type_enum; } else { htm += 'No enum values'; }
	if (description != null) { htm += '<br>Description : ' +description; }
	htm +=  "</span></td>\n";
	htm +=	"	<td><button type='button' onclick='click_button_table_del("+ido+")'>";
	htm +=	"		Del.</button></td>\n";
	htm +=	"</tr>\n";

	$("#obj_table_body").append(htm);
}

// Delete button for each row in objects table. 
//	@param rowid : id of row.
function click_button_table_del(rowid)
{
	//alert("Delete #obj_table_oid_"+rowid);
	// first check if there is no reference in rule or display
	displayVal=$("#id_display").val();
	ruleVal=$("#id_rules").val();
	rowNumRef=$("#obj_table_oid_"+rowid+"_SC").html();
	//alert(displayVal+" : "+rowNumRef+"#"+"#obj_table_oid_"+rowid+"_SC");
	if (displayVal!= '' && displayVal.indexOf(rowNumRef) !== -1)
	{
		trapDir.displayWarning("Remove reference to object ("+rowNumRef+") in display before deleting");
		$("#id_display").focus();
		return;
	}
	if (ruleVal != '' && ruleVal.indexOf(rowNumRef) !== -1)
	{
		trapDir.displayWarning("Remove reference to object ("+rowNumRef+") in rules before deleting");
		$("#id_rules").focus();
		return;
	}	
	$("#obj_table_oid_"+rowid).remove();
	objectsList[rowid]=null;
	//newcount=1;
}

function translateOID(oid,callback)
{
	$.ajax({
			url: translateoidHelper,
			async: true,
			dataType: "json",
			type: "POST",
			data: 
			{
				"oid": oid,
			},
	        success: function (data) 
			{
				//alert(data.status);
				if (data.status == "OK") 
				{
					//alert(data.type_enum);
					callback(count_id,oid,data.mib,data.name,'',data.type,data.type_enum);
					count_id++;
				} 
				else 
				{
					callback(count_id,oid,'not found','not found');
					count_id++;
				}
			},
			error: function (data)
			{
				trapDir.displayWarning ("error" + data);
			}
	});
}

function selectTrapName(update=1) // On trap select update textual details and mainOID (or not with update =0) 
{
	trapInput=$("#id_mainMibs_Trap").val();
	if (trapInput == -1) return; // do nothing if "..." is selected
	if (update==1) {
		$("#id_mainoid").val(trapInput);
	}
	mib=$("#id_mainMibs option:selected" ).text();
	name=$("#id_mainMibs_Trap option:selected" ).text();
	$("#id_mainoid_trapname").html(" "+mib+"::"+name+" ");
	$("#id_mainoid_add_objects").prop( "disabled", false );

	// Set trap description
	$.ajax({
		url: translateoidHelper,
		async: true,
		dataType: "json",
		type: "POST",
		data: 
		{
			"oid": trapInput,
		},
        success: function (data) 
		{
			//alert(data.status);
			if (data.status == "OK") 
			{
				//alert(data.type_enum);
				$("#trap_description").html(data.description);
			} 
			else 
			{
				$("#trap_description").html('');	
			}
		},
		error: function (data)
		{
			trapDir.displayWarning ("error" + data);
		}
	});	
	
}

function TrapNameGet(selectMib,selectUpdate)
{
	// Get mib
	hostInput=$("#"+selectMib).val();
	//alert(hostInput);
	$.ajax({
			url: trapfrommmibHelper,
			async: true,
			dataType: "json",
			type: "POST",
			data: 
			{
				"mib": hostInput,
			},
	        success: function (data) 
			{
				//alert(data.status);
				if (data.status == "OK") 
				{
					trapList=data.traps;
					// Put host list in <option> for user to choose.
					html='<option value="-1">...</option>';
					for(var key in trapList)
					{
						  html+='<option value="'+key+'" >'+trapList[key]+'</option>';
						  
					}					
				} 
				else 
				{
						//alert ("Error");
						html='<option selected>'+data.status+'<option>';
						
				}
				$("#"+selectUpdate).html(html);
			}
	});

}

function serviceGet(serviceSet=null,source = null, destination = null, hostidSet = null, addOption = null, addOptionVal = null)
{
	// Get host services
	source = $(source);
	destination = $(destination);
	if (source.length == 0 || destination.length == 0) { trapDir.displayWarning ("Error in service get, open issue");return;}
	data = { "host": source.val() };
	trapDir.ajaxCall (serviceHelper, data, 
		function(data) { // status OK
			serviceList=data.services;
			// Set host object id
			hostid=data.hostid;
			if (hostidSet != null) { $("#id_Hidden_hostid").val(hostid); }
			html='';
			serviceList.forEach(function (service){
				html+='<option value="'+service[0]+'">'+service[1]+'</option>';
			});
			if (addOption != null) html = '<option value="'+addOption+'">'+addOptionVal+'</option>' + html;
			destination.html(html);
			if (serviceSet != null)
			{
				destination.val(serviceSet);	
			}		
		}, 
		function(data) { // status not OK
    		html='<option value=-1 selected>'+data.status+'<option>'
    		destination.html(html);
    		trapDir.displayWarning ("Services : " + data.status);		
	} , null );

	return;	
}

function hostGroupServiceGet(serviceSet=null,source = null, destination = null, groupIdSet = null, addOption = null, addOptionVal = null)
{
	source = (source == null ? $("#id_hostgroupfilter") : $(source))
	destination = (destination == null ? $("#id_service_hostgroup") : $(destination))
	// Get Host name
	host=source.val();
	// Get service list
	
	$.ajax({
			url: hostgroupserviceHelper,
			async: true,
			dataType: "json",
			type: "POST",
			data: 
			{
				"host": host,
			},
	        success: function (data) 
			{
				//alert(data.status);
				if (data.status == "OK") 
				{
					serviceList=data.services;
					// Set host object id
					hostid=data.hostid;
					if (groupIdSet != null) { $("#id_Hidden_hostgroup").val(hostid); }
					html='';
					serviceList.forEach(function (service){
						html+='<option value="'+service[0]+'">'+service[1]+'</option>';
					});
					if (addOption != null) html = '<option value="'+addOption+'">'+addOptionVal+'</option>' + html;
					destination.html(html);
					if (serviceSet != null)
					{
						destination.val(serviceSet);	
					}
				} 
				else 
				{
					html='<option value=-1 selected>'+data.status+'<option>'
					destination.html(html);
					//alert ("Error");
				}
			}
	});
	
}

function hostFilterGet(id_source,id_options)
{
	// Get host list
	data = { "hostFilter": $(id_source).val() };
	
	trapDir.ajaxCall (hostHelper, data, function(data) {
					hostList=data.hosts;
					html='';
					hostList.forEach(function (host)
					{
						html+='<option >'+host+'</option>';
					});
					$(id_options).html(html);		
	}, null , null );
}

function hostGroupFilterGet(id_source,id_options)
{
	// Get hostgroup list
	data = { "hostFilter": $(id_source).val() };
	
	trapDir.ajaxCall (hostgroupHelper, data, function(data) {
					hostList=data.hosts;
					html='';
					hostList.forEach(function (host)
					{
						html+='<option >'+host+'</option>';
					});
					$(id_options).html(html);		
	}, null , null );
}

function test_rule()
{
	var resultText=$("#testrule_result"); 
	resultText.html('');// Empty result box
	// Get shortcut and val 
	var listVars=[];
	//var index_list=1;

	for (var i=1; i < objectsList_id; i++) { 
		if ($("#obj_table_oid_"+i+"_SC") != null) {
			var varName=$("#obj_table_oid_"+i+"_SC").html();
			varName = varName.replace(/\$/g,'');
			var varValue = $("#obj_table_oid_"+i+"_value").val();			
			listVars[varName]=varValue;
			//console.log('add : ' + varName +'/' +listVars[varName]);
		}
	}

	// Substitute variables with values
	var cur_rule=$("#id_rules").val();
	var variables=cur_rule.match(/\$[0-9]+\$/g);

	if (variables!=null)
	{
		for(var i=0;i<variables.length;i++)
		{
       		var varName=variables[i].substr(1,variables[i].length-2);
       		if ( listVars[varName] === undefined || listVars[varName] == null){
       			resultText.html('Unknown/empty var $'+varName+'$');
       			return;
       		}
       		var curVar='$'+varName+'$';
       		var curVarValue;
       		if (listVars[varName].match(/^[0-9]*\.?[0-9]+$/) != null )
       			curVarValue = listVars[varName];
       		else
       			curVarValue = '"' + listVars[varName] + '"';
       		cur_rule=cur_rule.replace(curVar,curVarValue);
   		};
	}
	resultText.html("Evaluated : " + cur_rule + "\n");

	// Do ajax call
	$.ajax({
			url: testHelper,
			async: true,
			dataType: "json",
			type: "POST",
			data: 
			{
				"rule"		: 	cur_rule,
				"action"	:	'evaluate'
			},
	        success: function (data) 
			{
				if (data.status == "OK") 
				{
					resultText.html(resultText.html()+' : ' +data.message);
				} 
				else 
				{
					resultText.html(resultText.html()+' : Error in evaluation : '+data.status);		
				}
			},
			error: function (data)
			{
				trapDir.displayWarning ("Error : " + data);
			}
	});	
}

$(function() {

	if (icinga.isLoadedModule('trapdirector') === false)
	{
		alert('TrapDirector javascript not loaded. This page won\'t work as expected');
		return;
	}
	
	trapDir = icinga.modules.trapdirector.object;

	$( "#id_submit_main" ).click(function( event ) {
		event.preventDefault();
		submitMain(0);
	});
	
	$( "#id_delete_main").click(function( event ) {
		event.preventDefault();
		deleteMain();
	});

	$( "#id_clone_main" ).click(function( event ) {
		event.preventDefault();
		submitMain(1);
	});
	
	$( "#id_test_rule").click(function( event ) {
		event.preventDefault();
		test_rule();
	});
	
<?php 
    if ($this->warning_message != '')
    {
        echo 'trapDir.displayWarning("'. $this->warning_message .'");';
    }
?>
<?php 
	if ($this->serviceGet == true) { 
		echo "serviceGet(";
		if ($this->serviceSet != null) // add param to service get to set service after ajax call
		  { echo '"'.$this->serviceSet . '"'; }
		else {echo "null";}
		echo ",'#id_hostfilter','#id_service',1);\n" ;  
	}
?>

<?php 
	if ($this->serviceGroupGet == true) { 
		echo "hostGroupServiceGet(";
		if ($this->serviceSet != null) // add param to service get to set service after ajax call
			{ echo '"'.$this->serviceSet.'"';}		
		echo ");\n" ;  
	}
	if ($this->selectGroup)
	{
		echo "toggle_host_hostgroup();\n";
	}
?>

<?php if ($this->execute_trap_select == true) { echo "selectTrapName(update=0);\n" ;} ?>

<?php if ($this->setToUpdate == true) { echo "setToUpdate();\n" ;} ?>

<?php 
    echo "$('#id_rule_action_true').val(".$this->setRuleMatch.");\n" ;	
	echo "$('#id_rule_action_false').val(".$this->setRuleNoMatch.");\n" ;
?>

<?php

    $rule='';
	foreach ( $this->objectList as $trapObj )
	{
	    $trapObj[4]=preg_replace("/\"/",'', $trapObj[4]);
		echo 'click_button_oid_add_cb(';
		echo    $trapObj[0] . ',"' . // index
		  		$trapObj[1] . '","' . // oid
				$trapObj[2] . '","' . // mib
				$trapObj[3] . '","' . //name 
				$trapObj[4] . '","' . // value
				$trapObj[5] . '","' . //type
				$trapObj[6] . '"'; //type_enum
		echo ");\n";
		
		$ruleValue=preg_match('/^[0-9]*\.?[0-9]+$/',$trapObj[4])!=0 ? $trapObj[4] : '\"' . $trapObj[4] .'\"';
		if ($rule!='') $rule .= ' & ';
		$rule.='( $' . $trapObj[0] . '$ = ' . $ruleValue . ' )';
		echo "count_id=".$trapObj[0]."+1;\n";
	}
	
	if ($this->create_basic_rule == true)
	{
	    echo '$("#id_rules").val("'.$rule .'");';
	   
	}
?>

	//var ruleList = new CruleList('<?= preg_replace('/"/',"&quot;",$this->rule) ?>', '', '<?= preg_replace('/"/',"&quot;",$this->display) ?>', <?= $this->setRuleMatch ?>, <?= $this->setRuleNoMatch ?>);
	//ruleList.setDefaultRule(true);
	ruleList.render();
	ruleList.editRulesetup(ruleList.ruleListArray[0],true);
});

</script>
