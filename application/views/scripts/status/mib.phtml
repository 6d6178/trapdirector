<div class="controls">
  <?= /** @var \Icinga\Module\Trapdirector\Controllers\ $this */ $this->tabs ?>
  <h1>MIB Management</h1>
</div>
<?php use Icinga\Web\Url; ?>
<div class="content">
	<h2>MIB database</h2>
	<ul>
	<li>Traps in database: <?= $this->mibDbCountTrap ?></li>
	<li>Objects in database: <?= $this->mibDbCount ?></li> 
	
	</ul>
	<br>
	<div id="id_animate_apply_mib2" ><i ></i></div>
	<button id="id_apply_mib" type="button" onclick="updateMIB()">
		<img id="id_animate_apply_mib" src="../../img/icons/refresh.png" style="display:none" >
		Update MIB Database
	</button>  
	Note: Command takes time to execute and is launched in background. Refresh the page to see objects count rising.<br>
	If you don't see any updates after several minutes, run in command line : 'icingacli trapdirector mib update' to have output<br>
	Note: You can leave this page safely and come back later.
   <br>
   
   <h2>snmptranslate</h2>
  
  Binary (<?= $this->snmptranslate_bin ?>) : 
	<span style="background-color:<? 
		if ($this->snmptranslate_state == 'warn') echo "#FFE555";
		else echo "#00D500"
	?>; font-weight:bold;"> 
		<?= $this->snmptranslate ?> </span>
		
  <h2>MIB directories</h2>
  Directories where mibs are searched (configured in module configuration): 
  <ul>
<?php 
	//print_r($this->dirArray);
	foreach($this->dirArray as $dir) 
	{ 
		echo '<li>'.$dir.' : (aprox. '.exec('cat '.$dir.'/*  | grep "NOTIFICATION-TYPE" | wc -l 2>/dev/null');
		echo " traps defined)</li>\n";
	} 
?>  
  </ul>
  Files added in MIB directory: 
  <ul>
 <?php
	foreach ($this->fileList as $file)
	{
		echo '<li>'.$file . "</li>\n";
	}
 ?>
  </ul>
  <h2>Upload a mib file</h2>
<?php
  if ($this->uploadStatus != null)
  {
	  echo "<p>Status : $this->uploadStatus </p>";
  }
?>
  
<?php echo $this->form->render() ?>
 
</div>

<script type='text/javascript'>
mibfileHelper='<?= Url::fromPath("trapdirector/") ?>status/mib';
mibfileUploadHelper='<?= Url::fromPath("trapdirector/") ?>status/mibfile';

// TODO : put function in a js (duplicate from add.phtml)
function displayWarning(message)
{
	$("#footer > #notifications").html('<li class="error fading-out">'+message+'</li>');
	//alert(message);
}
function displayOK(message)
{
	$("#footer > #notifications").html('<li class="success fading-out">'+message+'</li>');
}


function updateMIB()
{
	$("#id_apply_mib").prop("disabled",true);
	
	//$("#id_animate_apply_mib").addClass("spinner");
	$("#id_animate_apply_mib").css("animation","spin 2s linear infinite");	
	$("#id_animate_apply_mib").show();

	$.ajax({
			url: mibfileHelper,
			async: true,
			dataType: "json",
			type: "POST",
			data: 
			{
				"action"	: 	"update_mib_db"
			},
	        success: function (data) 
			{
				if (data.status == "OK") 
				{
					$("#id_apply_mib").prop("disabled",false);
					displayOK("Command sent");
				} 
				else 
				{
					displayWarning("Error sending command "+data.status);
					$("#id_animate_apply_mib").css("animation","none");	
					$("#id_animate_apply_mib").hide();						
				}
			
			},
			error: function (data)
			{
				//$("#id_apply_mib").prop("disabled",false);
				$("#id_animate_apply_mib").css("animation","none");	
				$("#id_animate_apply_mib").hide();				
				
				displayWarning ("Error in server answer");
			}
	});		
	
	// TODO : function is executed once 
	//setTimeout(function() { alert("test timeout");},5000);
	setTimeout(function(){ check_mib_update_action();},10000);
}

function check_mib_update_action()
{

	$.ajax({
			url: mibfileHelper,
			async: true,
			dataType: "json",
			type: "POST",
			data: 
			{
				"action"	: 	"check_update"
			},
	        success: function (data) 
			{
				if (data.status == "Alive and kicking") 
				{
					$("#id_animate_apply_mib").css("animation","spin 2s linear infinite");	
					$("#id_animate_apply_mib").show();
					$("#id_apply_mib").prop("disabled",true);
					setTimeout("check_mib_update_action()",100000); 
					return;
				}
				if (data.status == "tu quoque fili") 
				{
					$("#id_animate_apply_mib").css("animation","none");
					$("#id_animate_apply_mib").hide();
					$("#id_apply_mib").prop("disabled",false);
				}
			},
			error: function (data)
			{
				//$("#id_apply_mib").prop("disabled",false);
				//$("#id_animate_apply_mib").css("animation","none");	
				//$("#id_animate_apply_mib").hide();								
				displayWarning ("Error in server answer");
			}
	});
}

function add_mib_files(event)
{
	event.preventDefault();
	
	var form = $("#file_form");
	var fileSelect = $("#mib_select");
	var uploadButton = $("id_upload_button");
	
	var fd = new FormData();
	
	uploadButton.innerHTML = 'Uploading...';
	
	return;
	// Get the selected files from the input.
	var files = fileSelect.files;
	alert(files[0]);
	// Create a new FormData object.
	var formData = new FormData();

	// Loop through each of the selected files.
	for (var i = 0; i < files.length; i++) {
	  var file = files[i];

	  // Check the file type.
	  //if (!file.type.match('image.*')) {
	//	continue;
	  //}

	  // Add the file to the request.
	  alert(file.name);
	  formData.append('mibs[]', file, file.name);
	}
	var xhr = new XMLHttpRequest();
	xhr.open('POST', 'handler.php', true);

	// Set up a handler for when the request finishes.
	xhr.onload = function () {
	  if (xhr.status === 200) {
		// File(s) uploaded.
		uploadButton.innerHTML = 'Upload';
	  } else {
		alert('An error occurred!');
	  }
	};
	xhr.send(formData);
	
	//alert("Not Implemented");
}

$(function() {

	//$("#file_form").onsubmit = add_mib_files(event);
/*	$("#id_upload_button").click(function( event ) {
		alert('test');
		event.preventDefault();
		add_mib_files(event);
	});	
*/
	check_mib_update_action();
});

</script>
